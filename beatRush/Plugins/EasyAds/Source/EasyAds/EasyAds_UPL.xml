<?xml version="1.0" encoding="utf-8"?>
<!--
EasyAds - unreal engine 4 ads plugin
 Copyright (C) 2019 feiwu <feixuwu@outlook.com> All Rights Reserved.
-->
<!--Admob plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<!-- init section is always evaluated once per architecture -->
	<init>
		<log text="Admob Android init"/>
		
		<!-- get packaging for Admob from ini and reset it if architecture not supported -->
		
		<setStringFromProperty result="AppId" ini="Engine" section="/Script/EasyAdsEditor.AdmobSetting" property="AndroidAppId" default="0"/>
    <setStringFromProperty result="BannerAdUnit" ini="Engine" section="/Script/EasyAdsEditor.AdmobSetting" property="AndroidBannerUnit" default="0"/>
    <setStringFromProperty result="InterstitialAdUnit" ini="Engine" section="/Script/EasyAdsEditor.AdmobSetting" property="AndroidInterstitialUnit" default="0"/>
    <setStringFromProperty result="RewardedVideoAdUnit" ini="Engine" section="/Script/EasyAdsEditor.AdmobSetting" property="AndroidRewardedVideoAdUnit" default="0"/>
    <setStringFromProperty result="TestDevice" ini="Engine" section="/Script/EasyAdsEditor.AdmobSetting" property="AndroidTestDevice" default=""/>
    <setBoolFromProperty result="EnableTestSuite" ini="Engine" section="/Script/EasyAdsEditor.AdmobSetting" property="EnableAndroidTestSuite" default="false"/>

    <setBoolFromProperty result="DisableUnity" ini="Engine" section="/Script/EasyAdsEditor.AdmobSetting" property="DisableAndroidUnity" default="false"/>
    <setBoolFromProperty result="DisableVungle" ini="Engine" section="/Script/EasyAdsEditor.AdmobSetting" property="DisableAndroidVungle" default="false"/>
    <setBoolFromProperty result="DisableChartboost" ini="Engine" section="/Script/EasyAdsEditor.AdmobSetting" property="DisableAndroidChartboost" default="false"/>
    
    <dumpvars/>
	</init>

	
	<!-- optional files or directories to copy to Intermediate/Android/APK -->
	<gradleCopies>
      
      <log text="Copying easyads files to staging"/>
    
      <!-- <copyDir src="$S(PluginDir)/../ThirdParty/Android/libs" dst = "$S(BuildDir)/libs" />
               
      <copyDir src="$S(PluginDir)/../ThirdParty/Android/libs" dst = "$S(BuildDir)/gradle/app/src/main/libs" /> -->

    <if condition="DisableChartboost">
      <false>
        <copyFile src="$S(PluginDir)/../ThirdParty/Android/libs/chartboost.jar" dst = "$S(BuildDir)/libs/chartboost.jar" />
        <copyFile src="$S(PluginDir)/../ThirdParty/Android/libs/chartboost.jar" dst = "$S(BuildDir)/gradle/app/src/main/libs/chartboost.jar" />
      </false>
    </if>


    <if condition="DisableVungle">
      <false>
        
      </false>
    </if>

    
      <copyDir src="$S(PluginDir)/../ThirdParty/Android/Java"
					dst = "$S(BuildDir)/src" />
    
      <copyDir src="$S(PluginDir)/../ThirdParty/Android/Java"
					dst = "$S(BuildDir)/gradle/app/src/main/java" />
    
      <copyDir src="$S(PluginDir)/../ThirdParty/Android/permission_library"
					dst="$S(BuildDir)/JavaLibs/permission_library" />
    
      <copyDir src="$S(PluginDir)/../ThirdParty/Android/permission_library"
					dst="$S(BuildDir)/gradle/permission_library" />
      
	</gradleCopies>

  
  
	
	<!-- Files to copy before the build so they can be used in the build -->
	<prebuildCopies>
	    
	</prebuildCopies>
  
  <gradleProperties> 
      <insert>
        android.useAndroidX=true
        android.enableJetifier=true
      </insert>
  </gradleProperties>

  <!-- AAR dependencies -->
  <AARImports>
    <insertValue value="com.google.android.gms,play-services-auth,17.0.0"/>
    <insertNewline/>
    
    <insertValue value="com.google.android.gms,play-services-games,17.0.0"/>
    <insertNewline/>
    
    <insertValue value="com.google.android.gms,play-services-nearby,17.0.0"/>
    <insertNewline/>
    
    <insertValue value="com.google.android.gms,play-services-plus,17.0.0"/>
    <insertNewline/>
    
    
    <insertValue value="com.google.android.gms,play-services-ads,18.2.0"/>
    <insertNewline/>

    <insertValue value="com.android.volley,volley,1.1.1"/>
    <insertNewline/>

    <if condition="DisableUnity">
      <false>
        <insertValue value="com.google.ads.mediation,unity,3.2.0.0"/>
        <insertNewline/>
    
        <insertValue value="com.unity3d.ads,unity-ads,3.2.0"/>
        <insertNewline/>
      </false>
    </if>

    <if condition="DisableChartboost">
      <false>
        <insertValue value="com.google.ads.mediation,chartboost,7.5.0.0"/>
        <insertNewline/>

      </false>
    </if>

    <insertValue value="repository $S(PluginDir)/../ThirdParty/Android/libs"/>
    <insertNewline/>
    
    <insertValue value="com.ads.util,util,1.0.0" />
    <insertNewline/>

    <if condition="DisableVungle">
      <false>
        <insertValue value="com.google.ads.mediation,vungle,6.4.11.1.0"/>
        <insertNewline/>

        <insertValue value="com.vungle,publisher-sdk-android,6.4.11.0"/>
        <insertNewline/>
      
        <insertValue value="com.google.code.gson,gson,2.8.2"/>
        <insertNewline/>
		
		    <insertValue value="com.squareup.retrofit2,converter-gson,2.5.0"/>
        <insertNewline/>
		
		    <insertValue value="com.squareup.okhttp3,logging-interceptor,3.12.0"/>
        <insertNewline/>
		
		    <insertValue value="com.squareup.okhttp3,okhttp,3.12.0"/>
        <insertNewline/>
		
		    <insertValue value="com.squareup.okio,okio,1.15.0"/>
        <insertNewline/>
		
		    <insertValue value="com.squareup.retrofit2,retrofit,2.5.0"/>
        <insertNewline/>
        
      </false>
    </if>

    
    <if condition="EnableTestSuite">
      <true>
        <insertValue value="com.google.android.ads,mediation-test-suite,0.9.5"/>
        <insertNewline/>
      </true>
    </if>
  
  </AARImports>

  <buildGradleAdditions>
    
    <if condition="EnableTestSuite">
      <true>
        <insert>
          android {

            defaultConfig {
              multiDexEnabled true
            }
          }
          
        </insert>
      </true>
    </if>
    
  </buildGradleAdditions>
	

	<!-- optional updates applied to AndroidManifest.xml -->
	<androidManifestUpdates>
		

        <setElement result="AppIdMetadata" value="meta-data"/>
        <addAttribute tag="$AppIdMetadata" name="android:name" value="com.epicgames.ue4.AdMob.AppId"/>
        <addAttribute tag="$AppIdMetadata" name="android:value" value="$S(AppId)"/>
        <addElement tag="application" name="AppIdMetadata"/>
        
        <setElement result="BannerUnitMetadata" value="meta-data"/>
        <addAttribute tag="$BannerUnitMetadata" name="android:name" value="com.epicgames.ue4.AdMob.BannerAdUnit"/>
        <addAttribute tag="$BannerUnitMetadata" name="android:value" value="$S(BannerAdUnit)"/>
        <addElement tag="application" name="BannerUnitMetadata"/>
        
        
        <setElement result="InterstitialUnitMetadata" value="meta-data"/>
        <addAttribute tag="$InterstitialUnitMetadata" name="android:name" value="com.epicgames.ue4.AdMob.InterstitialAdUnit"/>
        <addAttribute tag="$InterstitialUnitMetadata" name="android:value" value="$S(InterstitialAdUnit)"/>
        <addElement tag="application" name="InterstitialUnitMetadata"/>


        <setElement result="RewardedVideoMetadata" value="meta-data"/>
        <addAttribute tag="$RewardedVideoMetadata" name="android:name" value="com.epicgames.ue4.AdMob.RewardedVideoAdUnit"/>
        <addAttribute tag="$RewardedVideoMetadata" name="android:value" value="$S(RewardedVideoAdUnit)"/>
        <addElement tag="application" name="RewardedVideoMetadata"/>

        <setElement result="TestDeviceMetaData" value="meta-data"/>
        <addAttribute tag="$TestDeviceMetaData" name="android:name" value="com.epicgames.ue4.AdMob.TestDevice"/>
        <addAttribute tag="$TestDeviceMetaData" name="android:value" value="$S(TestDevice)"/>
        <addElement tag="application" name="TestDeviceMetaData"/>
    
        <setElement result="AdmobAppId" value="meta-data"/>
        <addAttribute tag="$AdmobAppId" name="android:name" value="com.google.android.gms.ads.APPLICATION_ID"/>
        <addAttribute tag="$AdmobAppId" name="android:value" value="$S(AppId)"/>
        <addElement tag="application" name="AdmobAppId"/>

        <!-- Add permissions -->
				<addPermission android:name="android.permission.INTERNET" />
        <addPermission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
        <addPermission android:name="android.permission.ACCESS_NETWORK_STATE" />
			
	</androidManifestUpdates>

	<!-- optional additions to proguard -->
  <proguardAdditions>
    <insert>
      # Keep filenames and line numbers for stack traces
      -keepattributes SourceFile,LineNumberTable

      # Keep JavascriptInterface for WebView bridge
      -keepattributes JavascriptInterface

      # Sometimes keepattributes is not enough to keep annotations
      -keep class android.webkit.JavascriptInterface {
      *;
      }

      # Keep all classes in Unity Ads package
      -keep class com.unity3d.ads.** {
      *;
      }
      -dontwarn com.unity3d.ads.**
      -dontwarn java.lang.invoke.**

      #vungle
      -keep class com.vungle.warren.** { *; }
      -keep class com.vungle.warren.downloader.DownloadRequest
      -dontwarn com.vungle.warren.error.VungleError$ErrorCode
      -dontwarn com.vungle.warren.downloader.DownloadRequest$Status
      -keepclassmembers enum com.vungle.warren.** { *; }

      # Moat SDK
      -keep class com.moat.** { *; }
      -dontwarn com.moat.**
      -dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
      -keepattributes *Annotation*

      # Retrofit
      -keepattributes Signature, InnerClasses
      -dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
      -dontwarn javax.annotation.**
      -dontwarn kotlin.Unit
      -dontwarn retrofit2.-KotlinExtensions
      -keepclassmembers,allowshrinking,allowobfuscation interface * {
      @retrofit2.http.* &lt;methods&gt;
        ;
        }

        # Okio+OkHttp
        -dontwarn okhttp3.**
        -dontwarn okio.**
        -dontwarn javax.annotation.**
        -dontwarn org.conscrypt.**
        -keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase
        -keepclassmembers class * extends com.vungle.warren.persistence.Memorable {
        public &lt;init&gt;(byte[]);
      }


      -keep class com.chartboost.** { *; }

      -dontwarn org.apache.http.**
      -dontwarn android.net.http.**
      -dontwarn com.android.volley.**
      -dontwarn android.app.Activity

    </insert>
  </proguardAdditions>


	<!-- optional additions to the GameActivity imports in GameActivity.java -->
	<gameActivityImportAdditions>
		
				<insert>
          // AdMob imports
          import com.ads.util.AdMob;
          
        </insert>

    <if condition="EnableTestSuite">
      <true>
        <insert>
          import com.google.android.ads.mediationtestsuite.MediationTestSuite;
        </insert>
      </true>
      
    </if>
  </gameActivityImportAdditions>

	<!-- optional additions to the GameActivity class in GameActivity.java -->
	<gameActivityClassAdditions>
		
				<insert>
          // Begin AdMob gameActivityClassAdditions
          private AdMob adMobInstance;

          public void AndroidThunkJava_AdMob_ShowBanner(boolean bShowOnBottomOfScreen)
          {
          if (adMobInstance != null)
          {
          adMobInstance.ShowBanner(bShowOnBottomOfScreen );
          }
          }

          public void AndroidThunkJava_AdMob_PlayRewardedVideo()
          {
          if (adMobInstance != null)
          {
          adMobInstance.playRewardAds();
          }
          }

          public void AndroidThunkJava_AdMob_ShowInterstitialAd()
          {
          if (adMobInstance != null)
          {
          adMobInstance.ShowInterstitialAd();
          }
          }

          public void AndroidThunkJava_AdMob_HideBanner()
          {
          if (adMobInstance != null)
          {
          adMobInstance.HideAdBanner();
          }
          }

          public boolean AndroidThunkJava_AdMob_BannerReady()
          {
          if(adMobInstance != null)
          {
          return adMobInstance.IsBannerReady();
          }
          return false;
          }

          public boolean AndroidThunkJava_AdMob_InterstitialReady()
          {
          if(adMobInstance != null)
          {
          return adMobInstance.IsInterstitialReady();
          }
          return false;
          }

          public boolean AndroidThunkJava_AdMob_RewardedVideoReady()
          {
          if(adMobInstance != null)
          {
          return adMobInstance.IsRewardedVideoReady();
          }
          return false;
          }

          

          // End AdMob gameActivityClassAdditions
        </insert>

    <if condition="EnableTestSuite">
      <true>
          <insert>
            public void AndroidThunkJava_AdMob_LaunchTestSuite()
            {
            final String app_id = _bundle.getString("com.epicgames.ue4.AdMob.AppId");
            MediationTestSuite.launch(this, app_id);
            }
          </insert>
      </true>

    </if>

    <if condition="EnableTestSuite">
      <false>
        <insert>
          public void AndroidThunkJava_AdMob_LaunchTestSuite()
          {
            Log.debug("please enable testsuite in easyadss setting");
          }
        </insert>
      </false>

    </if>
			
	</gameActivityClassAdditions>
	
	<!-- optional additions to GameActivity onCreate metadata reading in GameActivity.java -->
	<gameActivityReadMetadataAdditions>
		
				<insert>
					// Facebook gameActivityReadMetadataAdditions
				</insert>
			
	</gameActivityReadMetadataAdditions>
	
	<!-- optional additions to GameActivity onCreate in GameActivity.java -->
	<gameActivityOnCreateAdditions>
		
				<insert>
          // Begin AdMob onCreate
          try
          {
          Log.debug("AdMob:Ready Create!");
          adMobInstance = new AdMob(this, activityLayout, false);

          final String app_id = _bundle.getString("com.epicgames.ue4.AdMob.AppId");
          final String adBannerUnit = _bundle.getString("com.epicgames.ue4.AdMob.BannerAdUnit");
          final String interstitialUnit = _bundle.getString("com.epicgames.ue4.AdMob.InterstitialAdUnit");
          final String adRewardedUnit = _bundle.getString("com.epicgames.ue4.AdMob.RewardedVideoAdUnit");
          final String testDevice = _bundle.getString("com.epicgames.ue4.AdMob.TestDevice");

          adMobInstance.InitAdMob(app_id, adBannerUnit, interstitialUnit, adRewardedUnit, testDevice);
          Log.debug("AdMob:InitFinish:" + app_id + " " + adBannerUnit + " " + interstitialUnit + " " + adRewardedUnit + " " + testDevice);
          }
          catch (Exception e) {
          e.printStackTrace();
          }

          // End AdMob onCreate
        </insert>
	</gameActivityOnCreateAdditions>

	<!-- optional additions to GameActivity onDestroy in GameActivity.java-->
	<gameActivityOnDestroyAdditions>
		
				<insert>
          // Begin AdMob onDestroy
          if (adMobInstance != null)
          {
          adMobInstance.OnDestroy();
          }
          // End AdMob onDestroy
        </insert>
			
	</gameActivityOnDestroyAdditions>
	
	<!-- optional additions to GameActivity onStart in GameActivity.java -->
	<gameActivityOnStartAdditions>
		
				<insert>
	// Begin AdMob onStart
	// End AdMob onStart
				</insert>
			
	</gameActivityOnStartAdditions>

	<!-- optional additions to GameActivity onStop in GameActivity.java -->
	<gameActivityOnStopAdditions>
		
				<insert>
	// Begin AdMob onStop
	// End AdMob onStop
				</insert>
			
	</gameActivityOnStopAdditions>

	<!-- optional additions to GameActivity onPause in GameActivity.java -->
	<gameActivityOnPauseAdditions>
		
				<insert>
          // Begin AdMob onPause
          if (adMobInstance != null)
          {
          adMobInstance.OnPause();
          }
          // End AdMob onPause
        </insert>
			
	</gameActivityOnPauseAdditions>

	<!-- optional additions to GameActivity onResume in GameActivity.java -->
	<gameActivityOnResumeAdditions>
		
				<insert>
          // Begin AdMob onResume
          if (adMobInstance != null)
          {
          adMobInstance.OnResume();
          }
          // End AdMob onResume
        </insert>
			
	</gameActivityOnResumeAdditions>

	<!-- optional additions to GameActivity onActivityResult in GameActivity.java -->
	<gameActivityOnActivityResultAdditions>
		
				<insert>
	// Begin Facebook onActivityResult
	//if (facebookLogin != null)
	//{
	//	facebookLogin.getCallbackManager().onActivityResult(requestCode, resultCode, data);
	//}
	// End Facebook onActivityResult
				</insert>
			
	</gameActivityOnActivityResultAdditions>

	<!-- optional libraries to load in GameActivity.java before libUE4.so -->
	<soLoadLibrary>
	</soLoadLibrary>
</root>
